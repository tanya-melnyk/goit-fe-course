{"version":3,"sources":["webpack:///E:/Full_Stack_Course/HTML_CSS/goit-fe-course/javascript/module-13/homework/src/js/fetchWeather.js","webpack:///E:/Full_Stack_Course/HTML_CSS/goit-fe-course/javascript/module-13/homework/src/js/renderWeather.js","webpack:///E:/Full_Stack_Course/HTML_CSS/goit-fe-course/javascript/module-13/homework/src/js/spinner.js","webpack:///E:/Full_Stack_Course/HTML_CSS/goit-fe-course/javascript/module-13/homework/src/js/getGeoPosition.js","webpack:///E:/Full_Stack_Course/HTML_CSS/goit-fe-course/javascript/module-13/homework/src/index.js"],"names":["baseURL","APImethod","APIkey","fetchWeather","query","fetch","then","response","ok","json","Error","error","refs","weatherSection","document","getElementById","icon","querySelector","location","temp","humidity","wind","conditions","renderWeather","weather","src","current","condition","textContent","name","temp_c","wind_kph","text","classList","remove","options","spinner","js_spinner","show","hide","add","PNotify","defaults","styling","icons","delay","maximumAge","timeout","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","latitude","coords","longitude","notice","addEventListener","e","preventDefault","currentTarget","children","city","value"],"mappings":"uJAEA,IAAMA,EAAU,2BACVC,EAAY,gBACZC,EAAS,uCAEA,SAASC,EAAaC,GAGnC,OAAOC,MAAML,EAAUC,EAAYC,GAFrB,MAASE,IAGpBE,KAAK,SAAAC,GACJ,GAAIA,EAASC,GAAI,OAAOD,EAASE,OAEjC,MAAM,IAAIC,QAJP,MAME,SAAAC,GACL,MAAM,IAAID,sBCdVE,EAAO,CACXC,eAAgBC,SAASC,eAAe,WACxCC,KAAMF,SAASG,cAAc,SAC7BC,SAAUJ,SAASG,cAAc,+BACjCE,KAAML,SAASG,cAAc,2BAC7BG,SAAUN,SAASG,cAAc,+BACjCI,KAAMP,SAASG,cAAc,2BAC7BK,WAAYR,SAASG,cAAc,kCAGtB,SAASM,EAAcC,GACpCZ,EAAKI,KAAKS,IAAM,SAAWD,EAAQE,QAAQC,UAAUX,KACrDJ,EAAKM,SAASU,YAAcJ,EAAQN,SAASW,KAC7CjB,EAAKO,KAAKS,YAAcJ,EAAQE,QAAQI,OACxClB,EAAKQ,SAASQ,YAAcJ,EAAQE,QAAQN,SAC5CR,EAAKS,KAAKO,YAAcJ,EAAQE,QAAQK,SACxCnB,EAAKU,WAAWM,YAAcJ,EAAQE,QAAQC,UAAUK,KAExDpB,EAAKC,eAAeoB,UAAUC,OAAO,aClBvC,ICCQC,EDDFC,EAAUtB,SAASC,eAAe,WAEzBsB,EAAA,CACbC,KADa,WAEXF,EAAQH,UAAUC,OAAO,cAE3BK,KAJa,WAKXH,EAAQH,UAAUO,IAAI,+CEG1BC,IAAQC,SAASC,QAAU,WAC3BF,IAAQC,SAASE,MAAQ,WACzBH,IAAQC,SAASG,MAAQ,KDXjBV,EAAU,CACdW,WAAY,KACZC,QAAS,KAGJ,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYC,mBAAmBJ,EAASC,EAAQf,MCS3D7B,KAQH,SAAmCY,GACjCkB,EAAQE,OAER,IAAMgB,EAAWpC,EAASqC,OAAOD,SAC3BE,EAAYtC,EAASqC,OAAOC,UAElCrD,EAAgBmD,EAAJ,IAAgBE,GACzBlD,KAAK,SAAAkB,GACJY,EAAQG,OACRhB,EAAcC,KAHlB,MAKS,SAAAb,GAAK,OACV8B,IAAQ9B,MAAM,mDArBpB,MAES,SAAAA,GAAK,OACV8B,IAAQgB,OACN,uEAsBa3C,SAASC,eAAe,eAChC2C,iBAAiB,SAE5B,SAA+BC,GAC7BA,EAAEC,iBAEFxB,EAAQE,OAKRnC,EAHawD,EAAEE,cACOC,SAASC,KAAKC,OAGnC1D,KAAK,SAAAkB,GACJY,EAAQG,OACRhB,EAAcC,KAHhB,MAKS,SAAAb,GACL8B,IAAQ9B,MAAM,kCACdyB,EAAQG","file":"main.3f737601fe93f3250f9a.js","sourcesContent":["'use strict';\r\n\r\nconst baseURL = 'https://api.apixu.com/v1';\r\nconst APImethod = '/current.json';\r\nconst APIkey = '?key=4a502c918a8341f7b27123556192606';\r\n\r\nexport default function fetchWeather(query) {\r\n  const APIquery = `&q=${query}`;\r\n\r\n  return fetch(baseURL + APImethod + APIkey + APIquery)\r\n    .then(response => {\r\n      if (response.ok) return response.json();\r\n\r\n      throw new Error();\r\n    })\r\n    .catch(error => {\r\n      throw new Error();\r\n    });\r\n}\r\n","'use strict';\r\n\r\nconst refs = {\r\n  weatherSection: document.getElementById('weather'),\r\n  icon: document.querySelector('.icon'),\r\n  location: document.querySelector('span[data-field=\"location\"]'),\r\n  temp: document.querySelector('span[data-field=\"temp\"]'),\r\n  humidity: document.querySelector('span[data-field=\"humidity\"]'),\r\n  wind: document.querySelector('span[data-field=\"wind\"]'),\r\n  conditions: document.querySelector('span[data-field=\"conditions\"]'),\r\n};\r\n\r\nexport default function renderWeather(weather) {\r\n  refs.icon.src = 'https:' + weather.current.condition.icon;\r\n  refs.location.textContent = weather.location.name;\r\n  refs.temp.textContent = weather.current.temp_c;\r\n  refs.humidity.textContent = weather.current.humidity;\r\n  refs.wind.textContent = weather.current.wind_kph;\r\n  refs.conditions.textContent = weather.current.condition.text;\r\n\r\n  refs.weatherSection.classList.remove('is-hidden');\r\n}\r\n","'use strict';\r\n\r\nconst spinner = document.getElementById('spinner');\r\n\r\nexport default {\r\n  show() {\r\n    spinner.classList.remove('is-hidden');\r\n  },\r\n  hide() {\r\n    spinner.classList.add('is-hidden');\r\n  },\r\n};\r\n","'use strict';\r\n\r\nexport default function getGeoPosition() {\r\n  const options = {\r\n    maximumAge: 1800000,\r\n    timeout: 5000,\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n  });\r\n}\r\n","'use strict';\n\nimport './styles.css';\nimport getGeoPosition from './js/getGeoPosition';\nimport fetchWeather from './js/fetchWeather';\nimport renderWeather from './js/renderWeather';\nimport spinner from './js/spinner';\nimport PNotify from 'pnotify/dist/es/PNotify';\nimport PNotifyStyleMaterial from 'pnotify/dist/es/PNotifyStyleMaterial.js';\nimport 'material-design-icons/iconfont/material-icons.css';\n\n// Set default PNotify styling.\nPNotify.defaults.styling = 'material';\nPNotify.defaults.icons = 'material';\nPNotify.defaults.delay = 3000;\n\n// Ask for user geoposition\ngetGeoPosition()\n  .then(showWeatherByUserPosition)\n  .catch(error =>\n    PNotify.notice(\n      'Нет прав доступа к геопозиции, используйте поиск по имени города.',\n    ),\n  );\n\n// show current weather by user geoposition\nfunction showWeatherByUserPosition(location) {\n  spinner.show();\n\n  const latitude = location.coords.latitude;\n  const longitude = location.coords.longitude;\n\n  fetchWeather(`${latitude},${longitude}`)\n    .then(weather => {\n      spinner.hide();\n      renderWeather(weather);\n    })\n    .catch(error =>\n      PNotify.error('Не удалось определить ваше местонахождения.'),\n    );\n}\n\n// show current weather by user input\nconst searchForm = document.getElementById('search-form');\nsearchForm.addEventListener('submit', showWeatherByCityName);\n\nfunction showWeatherByCityName(e) {\n  e.preventDefault();\n\n  spinner.show();\n\n  const form = e.currentTarget;\n  const cityName = form.children.city.value;\n\n  fetchWeather(cityName)\n  .then(weather => {\n    spinner.hide();\n    renderWeather(weather);\n  })\n    .catch(error => {\n      PNotify.error('Введите правильное имя города.');\n      spinner.hide();\n    })\n}\n"],"sourceRoot":""}