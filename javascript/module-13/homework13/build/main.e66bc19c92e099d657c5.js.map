{"version":3,"sources":["webpack:///./js/fetchWeather.js","webpack:///./js/renderWeather.js","webpack:///./js/spinner.js","webpack:///./js/getGeoPosition.js","webpack:///./index.js"],"names":["baseURL","APImethod","APIkey","refs","weatherSection","document","getElementById","icon","querySelector","location","temp","humidity","wind","conditions","options","spinner","js_spinner","show","classList","remove","hide","add","getWeather","query","errorMsg","fetch","then","response","ok","json","Error","error","fetchWeather","weather","src","current","condition","textContent","name","temp_c","wind_kph","text","renderWeather","console","log","PNotify","defaults","styling","icons","delay","maximumAge","timeout","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","latitude","coords","longitude","notice","addEventListener","e","preventDefault","currentTarget","children","city","value"],"mappings":"uJAEA,IAAMA,EAAU,2BACVC,EAAY,gBACZC,EAAS,qDCFTC,EAAO,CACXC,eAAgBC,SAASC,eAAe,WACxCC,KAAMF,SAASG,cAAc,SAC7BC,SAAUJ,SAASG,cAAc,+BACjCE,KAAML,SAASG,cAAc,2BAC7BG,SAAUN,SAASG,cAAc,+BACjCI,KAAMP,SAASG,cAAc,2BAC7BK,WAAYR,SAASG,cAAc,kCCPrC,ICCQM,EDDFC,EAAUV,SAASC,eAAe,WAEzBU,EAAA,CACbC,KADa,WAEXF,EAAQG,UAAUC,OAAO,cAE3BC,KAJa,WAKXL,EAAQG,UAAUG,IAAI,+CE2C1B,SAASC,EAAWC,EAAOC,GACzBT,EAAQE,OJ/CK,SAAsBM,GAGnC,OAAOE,MAAMzB,EAAUC,EAAYC,EAFrB,MAASqB,GAGpBG,KAAK,SAAAC,GACJ,GAAIA,EAASC,GAAI,OAAOD,EAASE,OAEjC,MAAM,IAAIC,MAAM,wBAJb,MAME,SAAAC,GACL,MAAMA,IIuCVC,CAAaT,GACVG,KAAK,SAAAO,IH5CK,SAAuBA,GACpC9B,EAAKI,KAAK2B,IAAM,SAAWD,EAAQE,QAAQC,UAAU7B,KACrDJ,EAAKM,SAAS4B,YAAcJ,EAAQxB,SAAS6B,KAC7CnC,EAAKO,KAAK2B,YAAcJ,EAAQE,QAAQI,OACxCpC,EAAKQ,SAAS0B,YAAcJ,EAAQE,QAAQxB,SAC5CR,EAAKS,KAAKyB,YAAcJ,EAAQE,QAAQK,SACxCrC,EAAKU,WAAWwB,YAAcJ,EAAQE,QAAQC,UAAUK,KAExDtC,EAAKC,eAAec,UAAUC,OAAO,aGqCjCuB,CAAcT,GACdlB,EAAQK,SAHZ,MAKS,SAAAW,GACLY,QAAQC,IAAIb,GACZc,IAAQd,MAAMP,GACdT,EAAQK,SAjDdyB,IAAQC,SAASC,QAAU,WAC3BF,IAAQC,SAASE,MAAQ,WACzBH,IAAQC,SAASG,MAAQ,KDbjBnC,EAAU,CACdoC,WAAY,KACZC,QAAS,KAGJ,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYC,mBAAmBJ,EAASC,EAAQxC,MCW3DY,KAQH,SAAmCjB,GACjC,IAAMiD,EAAWjD,EAASkD,OAAOD,SAC3BE,EAAYnD,EAASkD,OAAOC,UAIlCtC,EAHiBoC,EAAN,IAAkBE,EACZ,iDAbnB,MAES,SAAA7B,GAAK,OACVc,IAAQgB,OACN,uEAeaxD,SAASC,eAAe,eAChCwD,iBAAiB,SAE5B,SAA+BC,GAC7BA,EAAEC,iBAMF1C,EAJayC,EAAEE,cACOC,SAASC,KAAKC,MACnB","file":"main.e66bc19c92e099d657c5.js","sourcesContent":["'use strict';\r\n\r\nconst baseURL = 'https://api.apixu.com/v1';\r\nconst APImethod = '/current.json';\r\nconst APIkey = '?key=4a502c918a8341f7b27123556192606';\r\n\r\nexport default function fetchWeather(query) {\r\n  const APIquery = `&q=${query}`;\r\n\r\n  return fetch(baseURL + APImethod + APIkey + APIquery)\r\n    .then(response => {\r\n      if (response.ok) return response.json();\r\n\r\n      throw new Error('Place is not found');\r\n    })\r\n    .catch(error => {\r\n      throw error;\r\n    });\r\n}\r\n","'use strict';\r\n\r\nconst refs = {\r\n  weatherSection: document.getElementById('weather'),\r\n  icon: document.querySelector('.icon'),\r\n  location: document.querySelector('span[data-field=\"location\"]'),\r\n  temp: document.querySelector('span[data-field=\"temp\"]'),\r\n  humidity: document.querySelector('span[data-field=\"humidity\"]'),\r\n  wind: document.querySelector('span[data-field=\"wind\"]'),\r\n  conditions: document.querySelector('span[data-field=\"conditions\"]'),\r\n};\r\n\r\nexport default function renderWeather(weather) {\r\n  refs.icon.src = 'https:' + weather.current.condition.icon;\r\n  refs.location.textContent = weather.location.name;\r\n  refs.temp.textContent = weather.current.temp_c;\r\n  refs.humidity.textContent = weather.current.humidity;\r\n  refs.wind.textContent = weather.current.wind_kph;\r\n  refs.conditions.textContent = weather.current.condition.text;\r\n\r\n  refs.weatherSection.classList.remove('is-hidden');\r\n}\r\n","'use strict';\r\n\r\nconst spinner = document.getElementById('spinner');\r\n\r\nexport default {\r\n  show() {\r\n    spinner.classList.remove('is-hidden');\r\n  },\r\n  hide() {\r\n    spinner.classList.add('is-hidden');\r\n  },\r\n};\r\n","'use strict';\r\n\r\nexport default function getGeoPosition() {\r\n  const options = {\r\n    maximumAge: 1800000,\r\n    timeout: 5000,\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n  });\r\n}\r\n","'use strict';\n\nimport './styles.css';\n\nimport getGeoPosition from './js/getGeoPosition';\nimport fetchWeather from './js/fetchWeather';\nimport renderWeather from './js/renderWeather';\nimport spinner from './js/spinner';\n\nimport PNotify from 'pnotify/dist/es/PNotify';\nimport PNotifyStyleMaterial from 'pnotify/dist/es/PNotifyStyleMaterial.js';\nimport 'material-design-icons/iconfont/material-icons.css';\n\n// Set default PNotify styling.\nPNotify.defaults.styling = 'material';\nPNotify.defaults.icons = 'material';\nPNotify.defaults.delay = 3000;\n\n// Ask for user geoposition\ngetGeoPosition()\n  .then(showWeatherByUserPosition)\n  .catch(error =>\n    PNotify.notice(\n      'Нет прав доступа к геопозиции, используйте поиск по имени города.',\n    ),\n  );\n\n// fetch current weather by user geoposition\nfunction showWeatherByUserPosition(location) {\n  const latitude = location.coords.latitude;\n  const longitude = location.coords.longitude;\n  const coord = `${latitude},${longitude}`;\n  const errorMsg = 'Не удалось определить ваше местонахождения.';\n\n  getWeather(coord, errorMsg);\n}\n\n// fetch current weather by user input\nconst searchForm = document.getElementById('search-form');\nsearchForm.addEventListener('submit', showWeatherByCityName);\n\nfunction showWeatherByCityName(e) {\n  e.preventDefault();\n\n  const form = e.currentTarget;\n  const cityName = form.children.city.value;\n  const errorMsg = 'Введите правильное имя города.';\n\n  getWeather(cityName, errorMsg);\n}\n\n// show current weather\nfunction getWeather(query, errorMsg) {\n  spinner.show();\n\n  fetchWeather(query)\n    .then(weather => {\n      renderWeather(weather);\n      spinner.hide();\n    })\n    .catch(error => {\n      console.log(error);\n      PNotify.error(errorMsg);\n      spinner.hide();\n    });\n}\n"],"sourceRoot":""}